name: Update README recent projects (split originals & forks)

on:
  schedule:
    - cron: "17 7 * * *"   # diario 07:17 UTC
  workflow_dispatch: {}

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Build projects section
        id: build
        uses: actions/github-script@v7
        env:
          GH_USER: OdinoCano   # <-- tu usuario
          MAX_COUNT: "8"       # <-- cuantos mostrar por lista
        with:
          # Para p√∫blicos: usa el token por defecto.
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Para incluir privados de TODA tu cuenta:
          # github-token: ${{ secrets.REPO_TOKEN }}   # <-- crea un PAT con scope repo
          script: |
            const USER = process.env.GH_USER;
            const MAX = parseInt(process.env.MAX_COUNT, 10) || 8;

            // ------- Elige UNA de estas dos llamadas --------
            // 1) Solo p√∫blicos del usuario
            const { data: repos } = await github.rest.repos.listForUser({
              username: USER,
              sort: 'updated',
              per_page: 100
            });

            // 2) P√∫blicos + privados del usuario autenticado (requiere PAT en REPO_TOKEN)
            // const { data: repos } = await github.rest.repos.listForAuthenticatedUser({
            //   visibility: 'all',
            //   affiliation: 'owner,collaborator,organization_member',
            //   sort: 'updated',
            //   per_page: 100
            // });

            const originals = repos.filter(r => !r.fork).slice(0, MAX);
            const forks = repos.filter(r => r.fork).slice(0, MAX);

            const fmt = (r) => {
              const lang = r.language ? ` ¬∑ ${r.language}` : '';
              const stars = r.stargazers_count ? ` ¬∑ ‚≠ê ${r.stargazers_count}` : '';
              const updated = new Date(r.updated_at).toISOString().slice(0,10);
              const desc = (r.description || '').replace(/\r?\n|\r/g, ' ').trim();
              return `- **[${r.name}](${r.html_url})** ‚Äî ${desc || 'sin descripci√≥n'}${lang}${stars} ¬∑ _updated ${updated}_`;
            };

            const sec = [
              `### üß© Originales`,
              originals.length ? originals.map(fmt).join('\n') : '_Sin repos originales recientes._',
              ``,
              `### üç¥ Forks`,
              forks.length ? forks.map(fmt).join('\n') : '_Sin forks recientes._'
            ].join('\n');

            core.setOutput('section', sec);

      - name: Inject into README
        run: |
          FILE="README.md"
          START="<!--START_SECTION:projects-->"
          END="<!--END_SECTION:projects-->"
          CONTENT="${{ steps.build.outputs.section }}"

          awk -v start="$START" -v end="$END" -v repl="$CONTENT" '
            BEGIN{inside=0}
            {
              if ($0 ~ start) { print; print repl; inside=1; next }
              if ($0 ~ end) { inside=0 }
              if (!inside) print
            }
          ' "$FILE" > tmp && mv tmp "$FILE"

      - name: Commit changes
        run: |
          if git diff --quiet; then
            echo "No changes."
            exit 0
          fi
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add README.md
          git commit -m "chore(readme): split originals & forks (auto)"
          git push